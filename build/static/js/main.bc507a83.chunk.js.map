{"version":3,"sources":["serviceWorker.ts","utils/primary_enums/theme.enum.ts","router/history/index.ts","store/types/menu_bar_types/index.ts","store/actions/menu_bar_actions/index.ts","components/Header/components/HeaderToggleBtn.tsx","store/types/theme_types/index.ts","store/actions/theme_actions/index.ts","components/Header/styles/header.styles.ts","components/Header/header.tsx","components/Footer/styles/footer.styles.ts","components/Footer/footer.tsx","components/Layout/styles/layout.styles.ts","components/Layout/layout.tsx","components/Page/index.page.style.ts","components/Particles/Particles.tsx","assets/json/about.json.ts","pages/HomePage.tsx","pages/404Page.tsx","router/routes/CustomRoutes.tsx","generated/graphql.tsx","App.tsx","apollo/apolloClient.ts","store/reducers/themes_reducer/themes.reducer.ts","store/reducers/menu_bar_reducer/index.ts","store/reducers/user_agent_reducer/user.agent.reducer.ts","store/reducers/index.ts","utils/primary_utils/PrimaryUtils.ts","index.tsx","store/index.ts"],"names":["Boolean","window","location","hostname","match","ThemeNamesEnum","history","createBrowserHistory","MenuBarTypes","MenuBarActions","menuBarOpen","dispatch","type","TOGGLE_MENU_BAR_OPEN","payload","ThemeTypes","HeaderToggleBtn","props","optionalStyles","useDispatch","isMenuBarOpen","useSelector","state","menuBar","isOpen","Fragment","onClick","toggleMenuBarOpenAction","css","ThemeActions","themeData","getState","themes","allThemes","darkMode","lightMode","Object","values","length","ADD_ALL_THEME_DATA","currentThemeName","newThemeName","UPDATE_CURRENT_THEME","HeaderWrapper","styled","nav","theme","secondary","primary","NavList","h1","white","ul","Header","currentTheme","menuAnimationProps","useSpring","transform","menuButtonAnimationProps","opacity","optionalMenuBarStyles","display","justifyContent","alignItems","background","border","cursor","fontSize","color","outline","div","style","updateCurrentThemeAction","to","href","position","left","top","FooterWrapper","footer","Footer","PageWrapper","Layout","children","IntroductionWrapper","Particles","styles","bottom","zIndex","backgroundColor","width","params","particles","number","value","name","age","occupation","programmingLanguages","important","gitHub","linkedIn","emailAddress","homePage","interests","prettyHtml","require","default","withRouter","height","className","id","dangerouslySetInnerHTML","__html","aboutJson","NotFoundPage","CustomRoutes","exact","path","component","HomePage","AllThemesDocument","gql","App","baseOptions","ApolloReactHooks","themeLoading","loading","data","themeError","error","addAllThemeDataAction","apolloClient","ApolloClient","uri","cache","InMemoryCache","initialState","themesReducer","action","menuBarReducer","agent","isDevice","userAgentReducer","rootReducer","combineReducers","router","connectRouter","userAgent","PrimaryUtils","isDevelopment","process","store","composedTools","reduxMiddleware","thunk","composeWithDevTools","composeEnhancers","applyMiddleware","compose","createStore","assembleStore","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc507a83.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum ThemeNamesEnum {\n  darkMode = 'darkMode',\n  lightMode = 'lightMode',\n}\n","import { createBrowserHistory, History } from 'history';\n\nexport const history: History = createBrowserHistory();\n","export enum MenuBarTypes {\n  TOGGLE_MENU_BAR_OPEN = 'TOGGLE_MENU_BAR_OPEN',\n}\n","import { MenuBarTypes } from './../../types/menu_bar_types/index';\n\nexport class MenuBarActions {\n  /**\n   * @description Toggles whether the menu bar is open or not in the redux store\n   */\n  public static toggleMenuBarOpenAction(menuBarOpen: boolean): Function {\n    return (dispatch: Function) => {\n      dispatch({\n        type: MenuBarTypes.TOGGLE_MENU_BAR_OPEN,\n        payload: menuBarOpen,\n      });\n    };\n  }\n}\n","import React from 'react'; // ts-ignore\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { GiHamburgerMenu } from 'react-icons/gi';\n\nimport { MenuBarActions } from '../../../store/actions/menu_bar_actions';\n\ninterface IHeaderToggleBtnProps {\n  optionalStyles?: object;\n}\n\nconst HeaderToggleBtn = (props: IHeaderToggleBtnProps) => {\n  const { optionalStyles = {} } = props;\n\n  /** Beginning of Redux Selectors */\n  const dispatch = useDispatch();\n\n  const isMenuBarOpen = useSelector((state: any) => state.menuBar.isOpen);\n  /** End of Redux Selectors */\n\n  /** Beginning of Methods */\n  const toggleMenuBarOpen = (): void => {\n    if (isMenuBarOpen) {\n      dispatch(MenuBarActions.toggleMenuBarOpenAction(false));\n    } else {\n      dispatch(MenuBarActions.toggleMenuBarOpenAction(true));\n    }\n  };\n  /** End of Methods */\n  return (\n    <React.Fragment>\n      <button onClick={toggleMenuBarOpen} css={{ ...optionalStyles }}>\n        <GiHamburgerMenu />\n      </button>\n    </React.Fragment>\n  );\n};\n\nexport default HeaderToggleBtn;\n","export enum ThemeTypes {\n  ADD_ALL_THEME_DATA = 'ADD_ALL_THEME_DATA',\n  UPDATE_CURRENT_THEME = 'UPDATE_CURRENT_THEME',\n}\n","import { ThemeNamesEnum } from './../../../utils/primary_enums/theme.enum';\nimport { ThemeTypes } from './../../types/theme_types/index';\nimport { ICombinedTheme } from '../../../utils/primary_interfaces/theme.interface';\n\nexport class ThemeActions {\n  /**\n   * @description Adds all theme data to the redux store that has a combined\n   * theme object of darkMode and light mode;\n   */\n  public static addAllThemeDataAction(themeData: ICombinedTheme): Function {\n    return (dispatch: Function, getState: Function) => {\n      const {\n        allThemes: { darkMode, lightMode },\n      } = getState().themes; // Used to retrieve the the theme data from the redux store\n\n      if (!themeData) {\n        return;\n      } else if (\n        Object.values(darkMode).length ||\n        Object.values(lightMode).length\n      ) {\n        return;\n      }\n\n      dispatch({\n        type: ThemeTypes.ADD_ALL_THEME_DATA,\n        payload: {\n          allThemes: themeData,\n          lightMode: themeData.lightMode,\n          darkMode: themeData.darkMode,\n          currentThemeName: ThemeNamesEnum.darkMode,\n        },\n      });\n    };\n  }\n\n  /**\n   * @description Updates the current theme in the redux store, based on the the theme selected\n   */\n  public static updateCurrentThemeAction(\n    newThemeName: ThemeNamesEnum\n  ): Function {\n    return (dispatch: Function) => {\n      if (\n        newThemeName !== ThemeNamesEnum.darkMode &&\n        newThemeName !== ThemeNamesEnum.lightMode\n      ) {\n        return;\n      }\n\n      dispatch({\n        type: ThemeTypes.UPDATE_CURRENT_THEME,\n        payload: newThemeName,\n      });\n    };\n  }\n}\n","import styled from '@emotion/styled';\n\nexport const HeaderWrapper = styled.nav`\n  height: 100vh;\n  width: 80px;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid ${(props: any) => props.theme.secondary};\n  background: ${(props: any) => props.theme.primary};\n`;\n\nexport const HeaderTitle = styled.h1`\n  font-size: 1rem;\n  margin-top: 1rem;\n  text-align: center;\n\n  a {\n    color: ${(props: any) => props.theme.white};\n    text-decoration: none;\n  }\n`;\n\nexport const NavList = styled.ul`\n  height: 100%;\n  width: 100%;\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  margin-left: 0px;\n  margin-top: 2rem;\n\n  li {\n    text-align: center;\n\n    a {\n      font-size: 1.8rem;\n      text-decoration: none;\n      color: ${(props: any) => props.theme.white};\n\n      &:hover {\n        color: ${(props: any) => props.theme.secondary};\n      }\n    }\n\n    button {\n      border: none;\n      outline: none;\n      background: none;\n      color: ${(props: any) => props.theme.white};\n      font-size: 1.8rem;\n      cursor: pointer;\n\n      &:hover {\n        color: ${(props: any) => props.theme.secondary};\n      }\n    }\n  }\n`;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react'; // @ts-ignore\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Link } from 'react-router-dom';\nimport { animated, useSpring } from 'react-spring';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FaGithub, FaLinkedin, FaTwitterSquare } from 'react-icons/fa';\nimport { IoIosContact, IoIosPaper, IoIosLaptop } from 'react-icons/io';\nimport { MdWbSunny } from 'react-icons/md';\nimport { TiHome } from 'react-icons/ti';\n\nimport { ThemeNamesEnum } from '../../utils/primary_enums/theme.enum';\nimport HeaderToggleBtn from './components/HeaderToggleBtn';\nimport { ThemeActions } from '../../store/actions/theme_actions';\nimport { ITheme } from '../../utils/primary_interfaces/theme.interface';\nimport { HeaderWrapper, NavList } from './styles/header.styles';\n\nconst Header: React.FC = () => {\n  /** Beginning of Redux */\n  const dispatch = useDispatch();\n  const currentTheme: ITheme = useSelector(\n    (state: any) => state.themes.currentTheme,\n  );\n  const currentThemeName: ThemeNamesEnum = useSelector(\n    (state: any) => state.themes.currentThemeName,\n  );\n\n  const isMenuBarOpen: boolean = useSelector(\n    (state: any) => state.menuBar.isOpen,\n  );\n  /** End of Redux */\n\n  /** Beginning of Methods */\n  const toggleTheme = (): void => {\n    switch (currentThemeName) {\n      case ThemeNamesEnum.darkMode:\n        dispatch(\n          ThemeActions.updateCurrentThemeAction(ThemeNamesEnum.lightMode),\n        );\n        break;\n      case ThemeNamesEnum.lightMode:\n        dispatch(\n          ThemeActions.updateCurrentThemeAction(ThemeNamesEnum.darkMode),\n        );\n        break;\n      default:\n        dispatch(\n          ThemeActions.updateCurrentThemeAction(ThemeNamesEnum.darkMode),\n        );\n        break;\n    }\n  };\n  /** End of Methods */\n\n  /** Beginning of Animations and Styles */\n  const menuAnimationProps = useSpring({\n    transform: `translateX(${isMenuBarOpen ? 0 : -200}px)`,\n  });\n\n  const menuButtonAnimationProps = useSpring({\n    opacity: isMenuBarOpen ? 0 : 1,\n  });\n\n  const optionalMenuBarStyles = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    fontSize: '2rem',\n    color: currentTheme.primary,\n    outline: 'none',\n  };\n  /** End of Animations and Styles */\n\n  return (\n    <React.Fragment>\n      <animated.div style={{ ...menuAnimationProps }}>\n        <HeaderWrapper theme={currentTheme}>\n          <NavList theme={currentTheme}>\n            <li>\n              <HeaderToggleBtn />\n            </li>\n            <li>\n              <button onClick={toggleTheme}>\n                <MdWbSunny />\n              </button>\n            </li>\n            <li>\n              <Link to=\"/\">\n                <TiHome />\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/projects\">\n                <IoIosLaptop />\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/blog\">\n                <IoIosPaper />\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/contact\">\n                <IoIosContact />\n              </Link>\n            </li>\n\n            <li>\n              <a href=\"https://github.com/ericzorn93\">\n                <FaGithub />\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.linkedin.com/in/ericzorn/\">\n                <FaLinkedin />\n              </a>\n            </li>\n            <li>\n              <a href=\"https://twitter.com/zornwebdev\">\n                <FaTwitterSquare />\n              </a>\n            </li>\n          </NavList>\n        </HeaderWrapper>\n      </animated.div>\n\n      <animated.div\n        style={{\n          position: 'absolute',\n          left: 20,\n          top: 20,\n          ...menuButtonAnimationProps,\n        }}\n      >\n        <HeaderToggleBtn optionalStyles={optionalMenuBarStyles} />\n      </animated.div>\n    </React.Fragment>\n  );\n};\n\nexport default Header;\n","import styled from '@emotion/styled';\n\nexport const FooterWrapper = styled.footer`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100px;\n  border: 1px solid ${(props: any) => props.theme.secondary};\n  background-color: ${(props: any) => props.theme.primary};\n\n  a {\n    color: ${(props: any) => props.theme.white};\n    text-decoration: none;\n  }\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { FooterWrapper } from './styles/footer.styles';\n\nconst Footer: React.FC = () => {\n  /** Beginning of Redux Selectors */\n  const currentTheme = useSelector((state: any) => state.themes.currentTheme);\n  /** End of Redux Selectors */\n\n  return (\n    <FooterWrapper theme={currentTheme}>\n      <Link to=\"/\">&copy; Eric Zorn | Full-Stack Software Engineer - 2019</Link>\n    </FooterWrapper>\n  );\n};\n\nexport default Footer;\n","import styled from '@emotion/styled';\n\nexport const PageWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 10px 1fr;\n`;\n","import React from 'react';\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\n\nimport './styles/layout.css';\nimport Header from '../Header/header';\nimport Footer from '../Footer/footer';\nimport { PageWrapper } from './styles/layout.styles';\n\nconst Layout = ({ children }) => {\n  return (\n    <React.Fragment>\n      <PageWrapper>\n        <Header />\n        <main>{children}</main>\n      </PageWrapper>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default Layout;\n","import styled from '@emotion/styled';\n\nexport const IntroductionWrapper = styled.div`\n  margin-left: 5em;\n  color: white;\n  height: 100%;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n\n  @media (max-width: 500px) {\n    width: 100%;\n    grid-template-columns: 1fr;\n  }\n\n  /* Nested Columns */\n  .firstColumn {\n    margin-top: 2rem;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    text-align: left;\n\n    button {\n      height: 50px;\n      width: 50%;\n      background-color: transparent;\n      border: 2px solid ${(props: any) => props.theme.primary};\n      color: ${(props: any) => props.theme.white};\n      cursor: pointer;\n      transition: all ease-in-out 0.2s;\n      border-radius: 5px;\n\n      &:hover {\n        background-color: ${(props: any) => props.theme.primary};\n        border: 1px solid ${(props: any) => props.theme.white};\n      }\n    }\n  }\n\n  .secondColumn {\n    margin-top: -0.5em;\n    padding: 0 1rem;\n\n    #json {\n      font-size: 0.8em;\n\n      .json-key {\n        color: ${(props: any) => props.theme.primary};\n      }\n    }\n\n    /* Hide Second Column for mobile breakpoints */\n    @media (max-width: 900px) {\n      display: none;\n    }\n  }\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport ReactParticles from 'react-particles-js';\n\nimport { ITheme } from '../../utils/primary_interfaces/theme.interface';\n\ninterface ParticleProps {\n  style?: object;\n}\n\nconst Particles: React.FC<ParticleProps> = props => {\n  /** Redux Selectors */\n  const currentTheme: ITheme = useSelector(\n    (state: any) => state.themes.currentTheme,\n  );\n  /** End of Redux Selectors */\n\n  const particleParams = {\n    particles: {\n      number: {\n        value: 80,\n      },\n    },\n  };\n\n  const styles = {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    zIndex: -1,\n    backgroundColor: currentTheme.secondary || 'white',\n    width: '100vw',\n    ...props.style,\n  };\n\n  return (\n    <>\n      <ReactParticles params={particleParams} style={styles} />\n    </>\n  );\n};\n\nexport default Particles;\n","export default {\n  name: 'Eric Zorn',\n  age: 24,\n  occupation: 'Full-Stack Engineer',\n  programmingLanguages: [\n    'JavaScript',\n    'TypeScript',\n    'Python',\n    'Ruby',\n    'PHP',\n    'Java',\n  ],\n  important: {\n    gitHub: 'https://github.com/ericzorn93',\n    linkedIn: 'https://www.linkedin.com/in/ericzorn/',\n    emailAddress: 'zornwebdev@gmail.com',\n    homePage: 'https://www.zornwebdev.com',\n  },\n  interests: ['Programming, Tech Gadgets', 'Blink-182', 'Golf'],\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\n\nimport Layout from '../components/Layout/layout';\nimport { IntroductionWrapper } from '../components/Page/index.page.style';\nimport Particles from '../components/Particles/Particles';\nimport aboutJson from '../assets/json/about.json';\nimport { ITheme } from '../utils/primary_interfaces/theme.interface';\nimport { withRouter } from 'react-router-dom';\n\nconst prettyHtml = require('json-pretty-html').default;\n\ninterface Props {}\n\nconst HomePage: React.FC<Props> = props => {\n  const currentTheme: ITheme = useSelector(\n    (state: any) => state.themes.currentTheme,\n  );\n\n  const handleNavigateToContactPage = (): void => {\n    // history.push('/contact');\n  };\n\n  return (\n    <React.Fragment>\n      <Particles style={{ height: '100vh' }} />\n      <Layout>\n        <IntroductionWrapper theme={currentTheme}>\n          <div className=\"firstColumn\">\n            <h1>Hi I'm, Eric Zorn,</h1>\n            <p>I am a Full-Stack Software Engineer</p>\n            <p>\n              <em>Specializing in JavaScript, Python, and Ruby</em>\n            </p>\n            <p>Passionate Tech Enthusiast, Programmer, and Golfer</p>\n            <button type=\"button\" onClick={handleNavigateToContactPage}>\n              Contact Me\n            </button>\n          </div>\n\n          <div className=\"secondColumn\">\n            <br />\n            <p\n              id=\"json\"\n              dangerouslySetInnerHTML={{ __html: prettyHtml(aboutJson) }}\n            />\n          </div>\n        </IntroductionWrapper>\n      </Layout>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(HomePage);\n","import React from 'react';\n\nimport Layout from '../components/Layout/layout';\n\nconst NotFoundPage = () => (\n  <Layout>\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n);\n\nexport default NotFoundPage;\n","import React from 'react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { history } from '../history';\nimport HomePage from '../../pages/HomePage';\nimport NotFoundPage from '../../pages/404Page';\n\nexport const CustomRoutes = () => {\n  return (\n    <ConnectedRouter history={history}>\n      <>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </>\n    </ConnectedRouter>\n  );\n};\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type CombinedTheme = {\n   __typename?: 'CombinedTheme',\n  darkMode: Theme,\n  lightMode: Theme,\n};\n\nexport type CreateProjectInput = {\n  name: Scalars['String'],\n  description: Scalars['String'],\n  userId: Scalars['String'],\n  tagIds?: Maybe<Array<Maybe<Scalars['String']>>>,\n};\n\nexport type FindUserInput = {\n  id?: Maybe<Scalars['String']>,\n  emailAddress?: Maybe<Scalars['String']>,\n};\n\nexport type LoggedInUser = {\n   __typename?: 'LoggedInUser',\n  user?: Maybe<User>,\n  jwt?: Maybe<Scalars['String']>,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  registerUser: User,\n  deleteUser: User,\n  updateUserRole: User,\n  login: LoggedInUser,\n  createProject: Project,\n  deleteProject: Project,\n  createTag?: Maybe<Tag>,\n  updateTagWithProjects: Tag,\n  deleteTag: Tag,\n};\n\n\nexport type MutationRegisterUserArgs = {\n  registerData: RegisterUserInput\n};\n\n\nexport type MutationDeleteUserArgs = {\n  emailAddress: Scalars['String']\n};\n\n\nexport type MutationUpdateUserRoleArgs = {\n  userRoleInput: UpdateUserRoleInput\n};\n\n\nexport type MutationLoginArgs = {\n  emailAddress: Scalars['String']\n};\n\n\nexport type MutationCreateProjectArgs = {\n  createProjectInput: CreateProjectInput\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  projectId: Scalars['String']\n};\n\n\nexport type MutationCreateTagArgs = {\n  tagInput: TagInput\n};\n\n\nexport type MutationUpdateTagWithProjectsArgs = {\n  updateTagProjectsInput: UpdateTagProjectsInput\n};\n\n\nexport type MutationDeleteTagArgs = {\n  tagId: Scalars['String']\n};\n\nexport type Project = {\n   __typename?: 'Project',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  description: Scalars['String'],\n  user?: Maybe<User>,\n  tags?: Maybe<Array<Tag>>,\n  createdAt: Scalars['String'],\n  updatedAt: Scalars['String'],\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  allUsers: Array<User>,\n  findUser: User,\n  allProjects: Array<Project>,\n  allThemes: CombinedTheme,\n  allTags: Array<Tag>,\n};\n\n\nexport type QueryFindUserArgs = {\n  findUserInput: FindUserInput\n};\n\nexport type RegisterUserInput = {\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  emailAddress: Scalars['String'],\n  phoneNumber: Scalars['String'],\n  role?: Maybe<Scalars['String']>,\n};\n\nexport type Tag = {\n   __typename?: 'Tag',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  projects?: Maybe<Array<Project>>,\n  createdAt: Scalars['String'],\n  updatedAt: Scalars['String'],\n};\n\nexport type TagInput = {\n  name: Scalars['String'],\n  projectIds: Array<Scalars['String']>,\n};\n\nexport type Theme = {\n   __typename?: 'Theme',\n  primary: Scalars['String'],\n  secondary: Scalars['String'],\n  alternate: Scalars['String'],\n  lightAlternate: Scalars['String'],\n  light: Scalars['String'],\n  black: Scalars['String'],\n  white: Scalars['String'],\n};\n\nexport type UpdateTagProjectsInput = {\n  tagId: Scalars['String'],\n  projectIds: Array<Scalars['String']>,\n};\n\nexport type UpdateUserRoleInput = {\n  emailAddress: Scalars['String'],\n  role: Scalars['String'],\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['ID'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  emailAddress: Scalars['String'],\n  phoneNumber: Scalars['String'],\n  role: Scalars['String'],\n  projects: Array<Project>,\n  createdAt: Scalars['String'],\n  updatedAt: Scalars['String'],\n};\nexport type AllThemesQueryVariables = {};\n\n\nexport type AllThemesQuery = (\n  { __typename?: 'Query' }\n  & { allThemes: (\n    { __typename?: 'CombinedTheme' }\n    & { darkMode: (\n      { __typename?: 'Theme' }\n      & Pick<Theme, 'primary' | 'secondary' | 'alternate' | 'lightAlternate' | 'light' | 'black' | 'white'>\n    ), lightMode: (\n      { __typename?: 'Theme' }\n      & Pick<Theme, 'primary' | 'secondary' | 'alternate' | 'lightAlternate' | 'light' | 'black' | 'white'>\n    ) }\n  ) }\n);\n\nexport const AllThemesDocument = gql`\n    query allThemes {\n  allThemes {\n    darkMode {\n      primary\n      secondary\n      alternate\n      lightAlternate\n      light\n      black\n      white\n    }\n    lightMode {\n      primary\n      secondary\n      alternate\n      lightAlternate\n      light\n      black\n      white\n    }\n  }\n}\n    `;\n\n    export function useAllThemesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllThemesQuery, AllThemesQueryVariables>) {\n      return ApolloReactHooks.useQuery<AllThemesQuery, AllThemesQueryVariables>(AllThemesDocument, baseOptions);\n    }\n      export function useAllThemesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllThemesQuery, AllThemesQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<AllThemesQuery, AllThemesQueryVariables>(AllThemesDocument, baseOptions);\n      }\n      \nexport type AllThemesQueryHookResult = ReturnType<typeof useAllThemesQuery>;\nexport type AllThemesQueryResult = ApolloReactCommon.QueryResult<AllThemesQuery, AllThemesQueryVariables>;","import React from 'react';\nimport { ThemeProvider } from 'emotion-theming';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.css';\nimport { CustomRoutes } from './router/routes/CustomRoutes';\nimport { useAllThemesQuery } from './generated/graphql';\nimport { ThemeActions } from './store/actions/theme_actions';\n\nconst App: React.FC = () => {\n  /** Beginning of Redux */\n  const allThemes = useSelector((state: any) => state.themes.allThemes);\n  const dispatch = useDispatch();\n  /** End of Redux */\n\n  /** Beginning of GraphQL Queries */\n  const {\n    loading: themeLoading,\n    data: themeData,\n    error: themeError,\n  } = useAllThemesQuery();\n  /** End of GraphQL Queries */\n\n  if (\n    !Object.values(allThemes.darkMode).length &&\n    !Object.values(allThemes.lightMode).length &&\n    themeData\n  ) {\n    const { darkMode, lightMode } = themeData.allThemes;\n\n    const themes = {\n      darkMode,\n      lightMode,\n    };\n\n    dispatch(ThemeActions.addAllThemeDataAction(themes));\n  }\n\n  if (themeError || themeLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <ThemeProvider theme={allThemes}>\n      <div className=\"App\">\n        <CustomRoutes />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import ApolloClient from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n// @ts-ignore\nconst apolloClient = new ApolloClient({\n  uri: 'https://ez-portfolio-backend-graphql.herokuapp.com/graphql',\n  cache: new InMemoryCache(),\n});\n\nexport default apolloClient;\n","import { ThemeTypes } from './../../types/theme_types/index';\nimport { IReduxAction } from '../../../../types/redux_types';\n\nimport {\n  ITheme,\n  ICombinedTheme,\n} from '../../../utils/primary_interfaces/theme.interface';\n\ninterface IThemeState {\n  allThemes: ICombinedTheme;\n  darkMode: ITheme;\n  lightMode: ITheme;\n  currentThemeName: string;\n  currentTheme: ITheme;\n}\n\nconst initialState: IThemeState = {\n  allThemes: {\n    darkMode: {},\n    lightMode: {},\n  },\n  darkMode: {},\n  lightMode: {},\n  currentThemeName: '',\n  currentTheme: {},\n};\n\nconst themesReducer = (\n  state: IThemeState = initialState,\n  action: IReduxAction\n) => {\n  switch (action.type) {\n    case ThemeTypes.ADD_ALL_THEME_DATA:\n      return {\n        ...state,\n        allThemes: action.payload.allThemes,\n        lightMode: action.payload.lightMode,\n        darkMode: action.payload.darkMode,\n        currentTheme: action.payload.darkMode,\n        currentThemeName: action.payload.currentThemeName,\n      };\n    case ThemeTypes.UPDATE_CURRENT_THEME:\n      return {\n        ...state,\n        currentTheme: state.allThemes[action.payload],\n        currentThemeName: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default themesReducer;\n","import { IReduxAction } from './../../../../types/redux_types/index';\nimport { MenuBarTypes } from '../../types/menu_bar_types';\n\ninterface IMenuBarState {\n  isOpen: boolean;\n}\n\nconst initialState: IMenuBarState = {\n  isOpen: false,\n};\n\nconst menuBarReducer = (\n  state: IMenuBarState = initialState,\n  action: IReduxAction\n) => {\n  switch (action.type) {\n    case MenuBarTypes.TOGGLE_MENU_BAR_OPEN:\n      return {\n        ...state,\n        isOpen: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default menuBarReducer;\n","import { IReduxAction } from './../../../../types/redux_types/index';\n\ninterface UserAgentState {\n  agent: object;\n  isDevice: boolean;\n}\n\nconst initialState: UserAgentState = {\n  agent: {},\n  isDevice: false,\n};\n\nconst userAgentReducer = (\n  state: UserAgentState = initialState,\n  action: IReduxAction\n) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nexport default userAgentReducer;\n","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\n\nimport { history } from './../../router/history';\nimport themesReducer from './themes_reducer/themes.reducer';\nimport menuBarReducer from './menu_bar_reducer';\nimport userAgentReducer from './user_agent_reducer/user.agent.reducer';\n\nconst rootReducer = combineReducers({\n  router: connectRouter(history),\n  menuBar: menuBarReducer,\n  themes: themesReducer,\n  userAgent: userAgentReducer,\n});\n\n// Used as the root reducer for the redux store\nexport default rootReducer;\n","class PrimaryUtils {\n  public static isDevelopment: boolean = process.env.NODE_ENV !== 'production';\n}\n\nexport default PrimaryUtils;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\nimport apolloClient from './apollo/apolloClient';\nimport assembleStore from './store';\n\n// Redux Store\nconst store = assembleStore();\n\nReactDOM.render(\n  <ApolloProvider client={apolloClient}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers';\nimport PrimaryUtils from '../utils/primary_utils/PrimaryUtils';\n\n/**\n * @description Returns the necessary instance of the redux store\n */\nconst assembleStore = () => {\n  const reduxMiddleware = [thunk];\n\n  let composedTools: any;\n  if (PrimaryUtils.isDevelopment) {\n    const composeEnhancers = composeWithDevTools({});\n    composedTools = composeEnhancers(applyMiddleware(...reduxMiddleware));\n  } else {\n    composedTools = compose(applyMiddleware(...reduxMiddleware));\n  }\n\n  const store = createStore(rootReducer, composedTools);\n\n  return store;\n};\n\nexport default assembleStore;\n"],"sourceRoot":""}