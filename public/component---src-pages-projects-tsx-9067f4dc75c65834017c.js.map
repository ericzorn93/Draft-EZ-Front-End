{"version":3,"sources":["webpack:///./src/pages/projects.tsx"],"names":["ProjectsPage","pageEdges","allSitePage","edges","pageData","useMemo","filter","edge","pageName","node","internalComponentName","includes","map","updatedPageName","split","id","path","type","page","key","to","state"],"mappings":"0MAyEeA,UAnEgB,WAAM,IAEXC,EAFW,OAEjCC,YAAeC,MAiBXC,EAAWC,mBAAQ,WACvB,OAAOJ,EACJK,QAAO,SAAAC,GACN,IAAMC,EAAWD,EAAKE,KAAKC,sBAE3B,QAAKF,MAIAA,EAASG,SAAS,YAAcH,EAASG,SAAS,kBAMxDC,KAAI,SAAAL,GACH,IAAIM,EAAkBN,EAAKE,KAAKC,sBAQhC,OANIG,EAAgBF,SAAS,UAC3BE,EAAkBA,EAAgBC,MAAM,UAAU,GACzCD,EAAgBF,SAAS,gBAClCE,EAAkBA,EAAgBC,MAAM,cAAc,IAGjD,CACLC,GAAIR,EAAKE,KAAKM,GACdC,KAAMT,EAAKE,KAAKO,KAChBR,SAAUK,EACVI,KAAMV,EAAKE,KAAKO,KAAKL,SAAS,UAAY,SAAW,mBAG1D,CAACV,IAEJ,OACE,YAAC,IAAD,KACE,kCACCG,EAASQ,KAAI,SAAAM,GAAI,OAChB,8BACE,YAAC,OAAD,CAAMC,IAAKD,EAAKH,GAAIK,GAAIF,EAAKF,KAAMK,MAAO,CAAEJ,KAAMC,EAAKD,OACpDC,EAAKV,UAER,8B","file":"component---src-pages-projects-tsx-9067f4dc75c65834017c.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\n\nimport Layout from '../components/Layout/layout';\nimport { IAllSitePage } from '../shared/types/interfaces/pages/index.page.interfaces';\n\nconst ProjectsPage: React.FC = () => {\n  const {\n    allSitePage: { edges: pageEdges },\n  } = useStaticQuery<IAllSitePage>(\n    graphql`\n      query allPages {\n        allSitePage {\n          edges {\n            node {\n              id\n              path\n              internalComponentName\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const pageData = useMemo(() => {\n    return pageEdges\n      .filter(edge => {\n        const pageName = edge.node.internalComponentName;\n\n        if (!pageName) {\n          return false;\n        }\n\n        if (!pageName.includes('Github') && !pageName.includes('Contentful')) {\n          return false;\n        }\n\n        return true;\n      })\n      .map(edge => {\n        let updatedPageName = edge.node.internalComponentName;\n\n        if (updatedPageName.includes('Github')) {\n          updatedPageName = updatedPageName.split('Github')[1];\n        } else if (updatedPageName.includes('Contentful')) {\n          updatedPageName = updatedPageName.split('Contentful')[1];\n        }\n\n        return {\n          id: edge.node.id,\n          path: edge.node.path,\n          pageName: updatedPageName,\n          type: edge.node.path.includes('github') ? 'github' : 'contentful',\n        };\n      });\n  }, [pageEdges]);\n\n  return (\n    <Layout>\n      <h1>Projects</h1>\n      {pageData.map(page => (\n        <>\n          <Link key={page.id} to={page.path} state={{ type: page.type }}>\n            {page.pageName}\n          </Link>\n          <br />\n        </>\n      ))}\n    </Layout>\n  );\n};\n\nexport default ProjectsPage;\n"],"sourceRoot":""}