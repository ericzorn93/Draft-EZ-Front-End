{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { isBrowser } from \"./isBrowser\";\nlet apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, {\n  getToken\n}) {\n  const httpLink = createHttpLink({\n    uri: \"https://ez-portfolio-backend-graphql.herokuapp.com/graphql\" // credentials: \"include\"\n\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    const token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        cookie: token ? `qid=${token}` : \"\"\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":null,"metadata":{},"sourceType":"module"}