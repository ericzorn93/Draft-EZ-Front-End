{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport React from \"react\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Header from \"../Header\";\nimport { THEME_QUERY } from \"../../graphql/theme/queries/theme.query\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport { loadThemesAction } from \"../../store/actions/theme.actions\";\n\nconst Layout = ({\n  children\n}) => {\n  /** Beginning State */\n  const selectedTheme = useSelector(state => state.themes.selectedTheme);\n  /** End State */\n\n  /** Beginning Dispatchers */\n\n  const dispatch = useDispatch();\n  /** End Dispatchers */\n\n  /** Beginning Apollo Queries &Mutations */\n\n  const {\n    data: themeData,\n    error: themeError,\n    loading: themeLoading\n  } = useQuery(THEME_QUERY);\n  /** End Apollo Queries & Mutations */\n\n  if (themeError) {\n    return React.createElement(Error, {\n      message: \"Could not upload themes\"\n    });\n  }\n\n  if (themeLoading) {\n    return React.createElement(Loading, null);\n  }\n\n  if (!_Object$values(selectedTheme).length) {\n    const {\n      getAllThemes\n    } = themeData;\n    dispatch(loadThemesAction(getAllThemes, selectedTheme));\n  }\n\n  return React.createElement(\"main\", null, React.createElement(Header, null), children);\n};\n\nexport default Layout;","map":{"version":3,"sources":["/Users/ericzorn/Dropbox/Projects/UPDATED_PORTFOLIO/frontend/src/client/components/Layout/index.tsx"],"names":["useQuery","useSelector","useDispatch","Header","THEME_QUERY","Loading","Error","loadThemesAction","Layout","children","selectedTheme","state","themes","dispatch","data","themeData","error","themeError","loading","themeLoading","length","getAllThemes"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,WAAT,QAA4B,yCAA5B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,gBAAT,QAAiC,mCAAjC;;AAMA,MAAMC,MAA6B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD;AACA,QAAMC,aAAa,GAAGT,WAAW,CAAEU,KAAD,IAAgBA,KAAK,CAACC,MAAN,CAAaF,aAA9B,CAAjC;AACA;;AAEA;;AACA,QAAMG,QAAQ,GAAGX,WAAW,EAA5B;AACA;;AAEA;;AACA,QAAM;AACJY,IAAAA,IAAI,EAAEC,SADF;AAEJC,IAAAA,KAAK,EAAEC,UAFH;AAGJC,IAAAA,OAAO,EAAEC;AAHL,MAIFnB,QAAQ,CAACI,WAAD,CAJZ;AAKA;;AAEA,MAAIa,UAAJ,EAAgB;AACd,WAAO,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC;AAAf,MAAP;AACD;;AAED,MAAIE,YAAJ,EAAkB;AAChB,WAAO,oBAAC,OAAD,OAAP;AACD;;AAED,MAAI,CAAC,eAAcT,aAAd,EAA6BU,MAAlC,EAA0C;AACxC,UAAM;AAAEC,MAAAA;AAAF,QAAmBN,SAAzB;AACAF,IAAAA,QAAQ,CAACN,gBAAgB,CAACc,YAAD,EAAeX,aAAf,CAAjB,CAAR;AACD;;AAED,SACE,kCACE,oBAAC,MAAD,OADF,EAEGD,QAFH,CADF;AAMD,CApCD;;AAsCA,eAAeD,MAAf","sourcesContent":["import { useQuery } from \"react-apollo-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Header from \"../Header\";\nimport { THEME_QUERY } from \"../../graphql/theme/queries/theme.query\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport { loadThemesAction } from \"../../store/actions/theme.actions\";\n\ninterface LayoutProps {\n  children: any;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\n  /** Beginning State */\n  const selectedTheme = useSelector((state: any) => state.themes.selectedTheme);\n  /** End State */\n\n  /** Beginning Dispatchers */\n  const dispatch = useDispatch();\n  /** End Dispatchers */\n\n  /** Beginning Apollo Queries &Mutations */\n  const {\n    data: themeData,\n    error: themeError,\n    loading: themeLoading\n  } = useQuery(THEME_QUERY);\n  /** End Apollo Queries & Mutations */\n\n  if (themeError) {\n    return <Error message=\"Could not upload themes\" />;\n  }\n\n  if (themeLoading) {\n    return <Loading />;\n  }\n\n  if (!Object.values(selectedTheme).length) {\n    const { getAllThemes } = themeData;\n    dispatch(loadThemesAction(getAllThemes, selectedTheme));\n  }\n\n  return (\n    <main>\n      <Header />\n      {children}\n    </main>\n  );\n};\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}