{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar _jsxFileName = \"/Users/ericzorn/Dropbox/Projects/UPDATED_PORTFOLIO/frontend/src/components/Layout/index.tsx\";\nimport React from \"react\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Header from \"../Header\";\nimport { THEME_QUERY } from \"../../graphql/theme/queries/theme.query\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport { loadThemesAction } from \"../../store/actions/theme.actions\";\n\nvar Layout = function Layout(_ref) {\n  var children = _ref.children;\n\n  /** Beginning State */\n  var selectedTheme = useSelector(function (state) {\n    return state.themes.selectedTheme;\n  });\n  /** End State */\n\n  /** Beginning Dispatchers */\n\n  var dispatch = useDispatch();\n  /** End Dispatchers */\n\n  /** Beginning Apollo Queries &Mutations */\n\n  var _useQuery = useQuery(THEME_QUERY),\n      themeData = _useQuery.data,\n      themeError = _useQuery.error,\n      themeLoading = _useQuery.loading;\n  /** End Apollo Queries & Mutations */\n\n\n  if (themeError) {\n    return React.createElement(Error, {\n      message: \"Could not upload themes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  }\n\n  if (themeLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n  }\n\n  if (!_Object$values(selectedTheme).length) {\n    var getAllThemes = themeData.getAllThemes;\n    dispatch(loadThemesAction(getAllThemes, selectedTheme));\n  }\n\n  return React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), children);\n};\n\nexport default Layout;","map":{"version":3,"sources":["/Users/ericzorn/Dropbox/Projects/UPDATED_PORTFOLIO/frontend/src/components/Layout/index.tsx"],"names":["useQuery","useSelector","useDispatch","Header","THEME_QUERY","Loading","Error","loadThemesAction","Layout","children","selectedTheme","state","themes","dispatch","themeData","data","themeError","error","themeLoading","loading","length","getAllThemes"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,WAAT,QAA4B,yCAA5B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,gBAAT,QAAiC,mCAAjC;;AAMA,IAAMC,MAA6B,GAAG,SAAhCA,MAAgC,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACtD;AACA,MAAMC,aAAa,GAAGT,WAAW,CAAC,UAACU,KAAD;AAAA,WAAgBA,KAAK,CAACC,MAAN,CAAaF,aAA7B;AAAA,GAAD,CAAjC;AACA;;AAEA;;AACA,MAAMG,QAAQ,GAAGX,WAAW,EAA5B;AACA;;AAEA;;AATsD,kBAclDF,QAAQ,CAACI,WAAD,CAd0C;AAAA,MAW9CU,SAX8C,aAWpDC,IAXoD;AAAA,MAY7CC,UAZ6C,aAYpDC,KAZoD;AAAA,MAa3CC,YAb2C,aAapDC,OAboD;AAetD;;;AAEA,MAAIH,UAAJ,EAAgB;AACd,WAAO,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAIE,YAAJ,EAAkB;AAChB,WAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAI,CAAC,eAAcR,aAAd,EAA6BU,MAAlC,EAA0C;AAAA,QAChCC,YADgC,GACfP,SADe,CAChCO,YADgC;AAExCR,IAAAA,QAAQ,CAACN,gBAAgB,CAACc,YAAD,EAAeX,aAAf,CAAjB,CAAR;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGD,QAFH,CADF;AAMD,CApCD;;AAsCA,eAAeD,MAAf","sourcesContent":["import { useQuery } from \"react-apollo-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Header from \"../Header\";\nimport { THEME_QUERY } from \"../../graphql/theme/queries/theme.query\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport { loadThemesAction } from \"../../store/actions/theme.actions\";\n\ninterface LayoutProps {\n  children: any;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\n  /** Beginning State */\n  const selectedTheme = useSelector((state: any) => state.themes.selectedTheme);\n  /** End State */\n\n  /** Beginning Dispatchers */\n  const dispatch = useDispatch();\n  /** End Dispatchers */\n\n  /** Beginning Apollo Queries &Mutations */\n  const {\n    data: themeData,\n    error: themeError,\n    loading: themeLoading\n  } = useQuery(THEME_QUERY);\n  /** End Apollo Queries & Mutations */\n\n  if (themeError) {\n    return <Error message=\"Could not upload themes\" />;\n  }\n\n  if (themeLoading) {\n    return <Loading />;\n  }\n\n  if (!Object.values(selectedTheme).length) {\n    const { getAllThemes } = themeData;\n    dispatch(loadThemesAction(getAllThemes, selectedTheme));\n  }\n\n  return (\n    <main>\n      <Header />\n      {children}\n    </main>\n  );\n};\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}