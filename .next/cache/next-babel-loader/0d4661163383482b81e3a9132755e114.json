{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/ericzorn/Dropbox/Projects/UPDATED_PORTFOLIO/frontend/components/Header/index.tsx\";\nimport React from \"react\";\nimport { withRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport fetch from \"isomorphic-unfetch\";\nimport { THEME_QUERY } from \"../../apollo_setup/root_queries/theme.query\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport { LOAD_THEMES } from \"../../store/types/theme.types\";\n\nvar Header = function Header() {\n  /** Beginning State */\n  var completeThemes = useSelector(function (state) {\n    return state.themes.completeThemes;\n  });\n  var selectedTheme = useSelector(function (state) {\n    return state.themes.selectedTheme;\n  });\n  /** End State */\n\n  /** Beginning Dispatchers */\n\n  var dispatch = useDispatch();\n  /** End Dispatchers */\n\n  /** Beginning Apollo Queries &Mutations */\n\n  var _useQuery = useQuery(THEME_QUERY),\n      themeData = _useQuery.data,\n      themeError = _useQuery.error,\n      themeLoading = _useQuery.loading;\n  /** End Apollo Queries & Mutations */\n\n\n  if (themeError) {\n    return React.createElement(Error, {\n      message: \"Could not upload themes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  }\n\n  if (themeLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    });\n  }\n\n  var getAllThemes = themeData.getAllThemes;\n  dispatch({\n    type: LOAD_THEMES,\n    payload: {\n      lightMode: getAllThemes.lightMode,\n      darkMode: getAllThemes.darkMode,\n      completeThemes: getAllThemes,\n      selectedTheme: selectedTheme || \"darkMode\"\n    }\n  }); // dispatch(loadThemesAction(getAllThemes));\n\n  return React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Link, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Home\")), React.createElement(Link, {\n    href: \"/about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"About\")));\n};\n\nHeader.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var response, data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch(\"https://jsonplaceholder.typicode.com/todos/1\");\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return response.json();\n\n        case 5:\n          data = _context.sent;\n          console.log(data);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default withRouter(Header);","map":{"version":3,"sources":["/Users/ericzorn/Dropbox/Projects/UPDATED_PORTFOLIO/frontend/components/Header/index.tsx"],"names":["withRouter","Link","useQuery","useSelector","useDispatch","fetch","THEME_QUERY","Loading","Error","LOAD_THEMES","Header","completeThemes","state","themes","selectedTheme","dispatch","themeData","data","themeError","error","themeLoading","loading","getAllThemes","type","payload","lightMode","darkMode","getInitialProps","response","json","console","log"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAASC,WAAT,QAA4B,6CAA5B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,QAA4B,+BAA5B;;AAEA,IAAMC,MAAgB,GAAG,SAAnBA,MAAmB,GAAM;AAC7B;AACA,MAAMC,cAAc,GAAGR,WAAW,CAChC,UAACS,KAAD;AAAA,WAAgBA,KAAK,CAACC,MAAN,CAAaF,cAA7B;AAAA,GADgC,CAAlC;AAGA,MAAMG,aAAa,GAAGX,WAAW,CAAC,UAACS,KAAD;AAAA,WAAgBA,KAAK,CAACC,MAAN,CAAaC,aAA7B;AAAA,GAAD,CAAjC;AACA;;AAEA;;AACA,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA;;AAEA;;AAZ6B,kBAiBzBF,QAAQ,CAACI,WAAD,CAjBiB;AAAA,MAcrBU,SAdqB,aAc3BC,IAd2B;AAAA,MAepBC,UAfoB,aAe3BC,KAf2B;AAAA,MAgBlBC,YAhBkB,aAgB3BC,OAhB2B;AAkB7B;;;AAEA,MAAIH,UAAJ,EAAgB;AACd,WAAO,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAIE,YAAJ,EAAkB;AAChB,WAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA1B4B,MA4BrBE,YA5BqB,GA4BJN,SA5BI,CA4BrBM,YA5BqB;AA6B7BP,EAAAA,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAEd,WADC;AAEPe,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAEH,YAAY,CAACG,SADjB;AAEPC,MAAAA,QAAQ,EAAEJ,YAAY,CAACI,QAFhB;AAGPf,MAAAA,cAAc,EAAEW,YAHT;AAIPR,MAAAA,aAAa,EAAEA,aAAa,IAAI;AAJzB;AAFF,GAAD,CAAR,CA7B6B,CAuC7B;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF,EAIE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CAJF,CADF;AAUD,CAnDD;;AAqDAJ,MAAM,CAACiB,eAAP;AAAA;AAAA;AAAA;AAAA,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACKtB,KAAK,CAC/B,8CAD+B,CADV;;AAAA;AACjBuB,UAAAA,QADiB;AAAA;AAAA,iBAIJA,QAAQ,CAACC,IAAT,EAJI;;AAAA;AAIjBZ,UAAAA,IAJiB;AAKvBa,UAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAQA,eAAejB,UAAU,CAACU,MAAD,CAAzB","sourcesContent":["import { withRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport fetch from \"isomorphic-unfetch\";\n\nimport { THEME_QUERY } from \"../../apollo_setup/root_queries/theme.query\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport { LOAD_THEMES } from \"../../store/types/theme.types\";\n\nconst Header: React.FC = () => {\n  /** Beginning State */\n  const completeThemes = useSelector(\n    (state: any) => state.themes.completeThemes\n  );\n  const selectedTheme = useSelector((state: any) => state.themes.selectedTheme);\n  /** End State */\n\n  /** Beginning Dispatchers */\n  const dispatch = useDispatch();\n  /** End Dispatchers */\n\n  /** Beginning Apollo Queries &Mutations */\n  const {\n    data: themeData,\n    error: themeError,\n    loading: themeLoading\n  } = useQuery(THEME_QUERY);\n  /** End Apollo Queries & Mutations */\n\n  if (themeError) {\n    return <Error message=\"Could not upload themes\" />;\n  }\n\n  if (themeLoading) {\n    return <Loading />;\n  }\n\n  const { getAllThemes } = themeData;\n  dispatch({\n    type: LOAD_THEMES,\n    payload: {\n      lightMode: getAllThemes.lightMode,\n      darkMode: getAllThemes.darkMode,\n      completeThemes: getAllThemes,\n      selectedTheme: selectedTheme || \"darkMode\"\n    }\n  });\n\n  // dispatch(loadThemesAction(getAllThemes));\n\n  return (\n    <header>\n      <Link href=\"/\">\n        <a>Home</a>\n      </Link>\n      <Link href=\"/about\">\n        <a>About</a>\n      </Link>\n    </header>\n  );\n};\n\nHeader.getInitialProps = async () => {\n  const response: any = await fetch(\n    \"https://jsonplaceholder.typicode.com/todos/1\"\n  );\n  const data = await response.json();\n  console.log(data);\n};\n\nexport default withRouter(Header);\n"]},"metadata":{},"sourceType":"module"}