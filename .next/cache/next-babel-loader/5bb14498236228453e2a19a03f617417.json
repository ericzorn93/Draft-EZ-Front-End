{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport React from \"react\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Header from \"../Header\";\nimport { THEME_QUERY } from \"../../graphql/theme/queries/theme.query\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport { loadThemesAction } from \"../../store/actions/theme.actions\";\n\nconst Layout = ({\n  children\n}) => {\n  /** Beginning State */\n  const selectedTheme = useSelector(state => state.themes.selectedTheme);\n  /** End State */\n\n  /** Beginning Dispatchers */\n\n  const dispatch = useDispatch();\n  /** End Dispatchers */\n\n  /** Beginning Apollo Queries &Mutations */\n\n  const {\n    data: themeData,\n    error: themeError,\n    loading: themeLoading\n  } = useQuery(THEME_QUERY);\n  /** End Apollo Queries & Mutations */\n\n  if (themeError) {\n    return React.createElement(Error, {\n      message: \"Could not upload themes\"\n    });\n  }\n\n  if (themeLoading) {\n    return React.createElement(Loading, null);\n  }\n\n  if (!_Object$values(selectedTheme).length) {\n    const {\n      getAllThemes\n    } = themeData;\n    dispatch(loadThemesAction(getAllThemes, selectedTheme));\n  }\n\n  return React.createElement(\"main\", null, React.createElement(\"div\", null, React.createElement(Header, null)), React.createElement(\"div\", null, children));\n};\n\nexport default Layout;","map":null,"metadata":{},"sourceType":"module"}