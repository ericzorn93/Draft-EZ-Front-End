{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport cookie from \"cookie\";\nimport Head from \"next/head\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./init-apollo\";\nimport { isBrowser } from \"./isBrowser\";\n\nfunction parseCookies(req, options = {}) {\n  return cookie.parse(req ? req.headers.cookie || \"\" : document.cookie, options);\n}\n\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n      const apollo = initApollo({}, {\n        getToken: () => parseCookies(req).qid\n      });\n      ctx.ctx.apolloClient = apollo;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (!isBrowser) {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(React.createElement(App, _extends({}, appProps, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error(\"Error while running `getDataFromTree`\", error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo's store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token;\n        }\n      });\n    }\n\n    render() {\n      return React.createElement(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${App.displayName})`), _temp;\n});","map":null,"metadata":{},"sourceType":"module"}