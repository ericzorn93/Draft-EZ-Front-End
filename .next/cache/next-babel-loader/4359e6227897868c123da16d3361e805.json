{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport React from \"react\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Header from \"../Header\";\nimport { THEME_QUERY } from \"../../graphql/theme/queries/theme.query\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport { loadThemesAction } from \"../../store/actions/theme.actions\";\n\nvar Layout = function Layout(_ref) {\n  var children = _ref.children;\n\n  /** Beginning State */\n  var selectedTheme = useSelector(function (state) {\n    return state.themes.selectedTheme;\n  });\n  /** End State */\n\n  /** Beginning Dispatchers */\n\n  var dispatch = useDispatch();\n  /** End Dispatchers */\n\n  /** Beginning Apollo Queries &Mutations */\n\n  var _useQuery = useQuery(THEME_QUERY),\n      themeData = _useQuery.data,\n      themeError = _useQuery.error,\n      themeLoading = _useQuery.loading;\n  /** End Apollo Queries & Mutations */\n\n\n  if (themeError) {\n    return React.createElement(Error, {\n      message: \"Could not upload themes\"\n    });\n  }\n\n  if (themeLoading) {\n    return React.createElement(Loading, null);\n  }\n\n  if (!_Object$values(selectedTheme).length) {\n    var getAllThemes = themeData.getAllThemes;\n    dispatch(loadThemesAction(getAllThemes, selectedTheme));\n  }\n\n  return React.createElement(\"main\", null, React.createElement(Header, null), children);\n};\n\nexport default Layout;","map":null,"metadata":{},"sourceType":"module"}