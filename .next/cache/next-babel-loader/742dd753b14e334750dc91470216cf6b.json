{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nconst middleware = [thunk];\nconst composeEnhancers = composeWithDevTools({}); // Determine if devtools need to be present, based on the node environment\n\nlet loadMiddleware;\n\nif (process.env.NODE_ENV !== \"production\") {\n  loadMiddleware = composeEnhancers(applyMiddleware(...middleware));\n} else {\n  loadMiddleware = compose(applyMiddleware(...middleware));\n}\n\nexport default (() => createStore(rootReducer, loadMiddleware));","map":{"version":3,"sources":["/Users/ericzorn/Dropbox/Projects/UPDATED_PORTFOLIO/frontend/src/client/store/index.ts"],"names":["createStore","applyMiddleware","compose","composeWithDevTools","thunk","rootReducer","middleware","composeEnhancers","loadMiddleware","process","env","NODE_ENV"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,OAAtC,QAAoD,OAApD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,MAAMC,UAAU,GAAG,CAACF,KAAD,CAAnB;AACA,MAAMG,gBAAgB,GAAGJ,mBAAmB,CAAC,EAAD,CAA5C,C,CAEA;;AACA,IAAIK,cAAJ;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,cAAc,GAAGD,gBAAgB,CAACN,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAAjC;AACD,CAFD,MAEO;AACLE,EAAAA,cAAc,GAAGN,OAAO,CAACD,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAAxB;AACD;;AAED,gBAAe,MAAMN,WAAW,CAACK,WAAD,EAAcG,cAAd,CAAhC","sourcesContent":["import {createStore, applyMiddleware, compose} from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./reducers\";\n\nconst middleware = [thunk];\nconst composeEnhancers = composeWithDevTools({});\n\n// Determine if devtools need to be present, based on the node environment\nlet loadMiddleware: any;\nif (process.env.NODE_ENV !== \"production\") {\n  loadMiddleware = composeEnhancers(applyMiddleware(...middleware));\n} else {\n  loadMiddleware = compose(applyMiddleware(...middleware));\n}\n\nexport default () => createStore(rootReducer, loadMiddleware);\n"]},"metadata":{},"sourceType":"module"}