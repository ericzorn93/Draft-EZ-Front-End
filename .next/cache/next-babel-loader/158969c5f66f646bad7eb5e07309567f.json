{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { isBrowser } from \"./isBrowser\";\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken;\n  var httpLink = createHttpLink({\n    uri: \"https://ez-portfolio-backend-graphql.herokuapp.com/graphql\",\n    credentials: \"include\"\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        cookie: token ? \"qid=\".concat(token) : \"\"\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/ericzorn/Dropbox/Projects/UPDATED_PORTFOLIO/frontend/lib/init-apollo.ts"],"names":["ApolloClient","InMemoryCache","setContext","createHttpLink","fetch","isBrowser","apolloClient","global","create","initialState","getToken","httpLink","uri","credentials","authLink","_","headers","token","cookie","connectToDevTools","ssrMode","link","concat","cache","restore","initApollo","options"],"mappings":";AAAA,SACEA,YADF,EAEEC,aAFF,QAIO,cAJP;AAKA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,IAAIC,YAAwD,GAAG,IAA/D,C,CAEA;;AACA,IAAI,CAACD,SAAL,EAAgB;AACbE,EAAAA,MAAD,CAAgBH,KAAhB,GAAwBA,KAAxB;AACD;;AAMD,SAASI,MAAT,CAAgBC,YAAhB,QAA0D;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;AACxD,MAAMC,QAAQ,GAAGR,cAAc,CAAC;AAC9BS,IAAAA,GAAG,EAAE,4DADyB;AAE9BC,IAAAA,WAAW,EAAE;AAFiB,GAAD,CAA/B;AAKA,MAAMC,QAAQ,GAAGZ,UAAU,CAAC,UAACa,CAAD,SAAoB;AAAA,QAAdC,OAAc,SAAdA,OAAc;AAC9C,QAAMC,KAAK,GAAGP,QAAQ,EAAtB;AACA,WAAO;AACLM,MAAAA,OAAO,oBACFA,OADE;AAELE,QAAAA,MAAM,EAAED,KAAK,iBAAUA,KAAV,IAAoB;AAF5B;AADF,KAAP;AAMD,GAR0B,CAA3B,CANwD,CAgBxD;;AACA,SAAO,IAAIjB,YAAJ,CAAiB;AACtBmB,IAAAA,iBAAiB,EAAEd,SADG;AAEtBe,IAAAA,OAAO,EAAE,CAACf,SAFY;AAED;AACrBgB,IAAAA,IAAI,EAAEP,QAAQ,CAACQ,MAAT,CAAgBX,QAAhB,CAHgB;AAItBY,IAAAA,KAAK,EAAE,IAAItB,aAAJ,GAAoBuB,OAApB,CAA4Bf,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD;;AAED,eAAe,SAASgB,UAAT,CAAoBhB,YAApB,EAAuCiB,OAAvC,EAAyD;AACtE;AACA;AACA,MAAI,CAACrB,SAAL,EAAgB;AACd,WAAOG,MAAM,CAACC,YAAD,EAAeiB,OAAf,CAAb;AACD,GALqE,CAOtE;;;AACA,MAAI,CAACpB,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGE,MAAM,CAACC,YAAD,EAAeiB,OAAf,CAArB;AACD;;AAED,SAAOpB,YAAP;AACD","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject\n} from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { isBrowser } from \"./isBrowser\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!isBrowser) {\n  (global as any).fetch = fetch;\n}\n\ninterface Options {\n  getToken: () => string;\n}\n\nfunction create(initialState: any, { getToken }: Options) {\n  const httpLink = createHttpLink({\n    uri: \"https://ez-portfolio-backend-graphql.herokuapp.com/graphql\",\n    credentials: \"include\"\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        cookie: token ? `qid=${token}` : \"\"\n      }\n    };\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState: any, options: Options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return create(initialState, options);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}